{"version":3,"sources":["components/Navbar.js","containers/NavbarContainer.js","components/Campgrounds.js","containers/CampgroundsContainer.js","components/Homepage.js","serviceWorker.js","index.js"],"names":["Navbar","navStyle","display","backgroundColor","loginMes","this","props","user","href","style","className","React","Component","NavbarContainer","state","authenticated","name","divStyle","flex","margin","pageStyle","flexWrap","alignItems","flexDirection","Campgrounds","CampgroundList","campgrounds","map","c","key","alt","src","image","width","CampgroundsContainer","isLoaded","containerStyle","fetch","then","res","json","result","setState","error","height","Homepage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"+MAEqBA,E,kDACjB,aAAe,IAAD,8BACV,gBAEKC,SAAW,CACZC,QAAS,OACTC,gBAAoB,WALd,E,qDAWV,IAAIC,EAiBJ,OAfIA,EADDC,KAAKC,MAAMC,KAEN,4BACI,4CAAkBF,KAAKC,MAAMC,MAC7B,4BAAI,uBAAGC,KAAK,WAAR,YAKR,4BACI,4BAAI,uBAAGA,KAAK,UAAR,UACJ,4BAAI,uBAAGA,KAAK,WAAR,YAMZ,yBAAKC,MAAOJ,KAAKJ,UACb,yBAAKS,UAAU,iBACX,uBAAGA,UAAU,eAAeF,KAAK,KAAjC,aAEJ,yBAAKE,UAAU,4BACVN,Q,GAnCeO,IAAMC,WCCrBC,E,4MACjBC,MAAQ,CACJP,KAAM,GACNQ,eAAe,G,uDAIf,OACI,kBAAC,EAAD,CAAQR,KAAMF,KAAKS,MAAMP,KAAKS,W,GARGL,IAAMC,WCA7CK,EAAW,CAGbC,KAAgB,YAChBC,OAAgB,IAGdC,EAAY,CACdlB,QAAgB,OAChBmB,SAAgB,OAChBC,WAAgB,UAChBC,cAAgB,OAICC,E,uKAEb,IACMC,EADcpB,KAAKC,MAAMoB,YACIC,KAAI,SAAAC,GAAC,OACpC,yBAAKC,IAAKD,EAAEZ,KAAMP,MAAOQ,GACrB,4BAAKW,EAAEZ,MACP,yBAAKc,IAAI,aAAaC,IAAKH,EAAEI,MAAOC,MAAM,SAC1C,iDAGR,OACI,yBAAKxB,MAAOW,GACPK,O,GAZwBd,IAAMC,WCf1BsB,E,kDACjB,aAAe,IAAD,8BACV,gBAEKpB,MAAQ,CACTqB,UAAU,EACVT,YAAa,IAGjB,EAAKU,eAAiB,CAClBlC,QAAS,OACTqB,cAAe,SACfD,WAAY,SACZH,OAAQ,SACRc,MAAO,OAbD,E,gEAiBO,IAAD,OAChBI,MAAM,iDACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACC,EAAKC,SAAS,CACVP,UAAU,EACVT,YAAae,EAAOf,iBAG5B,SAACiB,GACG,EAAKD,SAAS,CACVP,UAAU,EACVQ,e,+BAOZ,OAAItC,KAAKS,MAAMqB,SAIP,yBAAK1B,MAAOJ,KAAK+B,gBACb,6BACI,8DAEJ,kBAAC,EAAD,CAAaV,YAAarB,KAAKS,MAAMY,eAPtC,kC,GAtC+Bf,IAAMC,WCElDK,EAAW,CAGb2B,OAAoB,QACpBzB,OAAoB,IACpBjB,QAAoB,OACpBqB,cAAoB,UAGHsB,E,uKAEb,OACI,yBAAKpC,MAAOQ,GACR,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALsBN,IAAMC,WCFxBkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlB,GACLmB,QAAQnB,MAAMA,EAAMoB,a","file":"static/js/main.a26070ba.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Navbar extends React.Component {\r\n    constructor() {\r\n        super()\r\n\r\n        this.navStyle = {\r\n            display: 'flex',\r\n            backgroundColor:    '#f8f8f8'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // Check for User\r\n        let loginMes;\r\n        if(this.props.user) {\r\n            loginMes = (\r\n                <ul>\r\n                    <li>Signed In As {this.props.user}</li>\r\n                    <li><a href=\"/logout\">Logout</a></li>\r\n                </ul>\r\n            )\r\n        } else {\r\n            loginMes = (\r\n                <ul>\r\n                    <li><a href=\"/login\">Login</a></li>\r\n                    <li><a href=\"/logout\">Logout</a></li>\r\n                </ul>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <nav style={this.navStyle}>\r\n                <div className=\"navbar-header\">\r\n                    <a className=\"navbar-brand\" href=\"/\">YelpCamp</a>\r\n                </div>\r\n                <div className=\"collapse navbar-collapse\">\r\n                    {loginMes}\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Navbar from '../components/Navbar';\r\n\r\nexport default class NavbarContainer extends React.Component {\r\n    state = {\r\n        user: {},\r\n        authenticated: true,\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Navbar user={this.state.user.name} />\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport {styles} from '../styles/neomorphism';\r\n\r\nconst divStyle = {\r\n    //borderRadius:   styles.borderRadius,\r\n    //boxShadow:      styles.boxShadow,\r\n    flex:           '0 0 350px',\r\n    margin:         10\r\n}\r\n\r\nconst pageStyle = {\r\n    display:        'flex',\r\n    flexWrap:       'wrap',\r\n    alignItems:     'stretch',\r\n    flexDirection:  'row'\r\n    //justifyContent: 'space-between'\r\n}\r\n\r\nexport default class Campgrounds extends React.Component {\r\n    render () {\r\n        const Campgrounds = this.props.campgrounds;\r\n        const CampgroundList = Campgrounds.map(c => (\r\n            <div key={c.name} style={divStyle}>\r\n                <h1>{c.name}</h1>\r\n                <img alt=\"Campground\" src={c.image} width='100%'></img>\r\n                <button>More Info</button>\r\n            </div>\r\n        ));\r\n        return (\r\n            <div style={pageStyle}>\r\n                {CampgroundList}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Campgrounds from '../components/Campgrounds'\r\n\r\nexport default class CampgroundsContainer extends React.Component {\r\n    constructor() {\r\n        super()\r\n\r\n        this.state = {\r\n            isLoaded: false,\r\n            campgrounds: []\r\n        };\r\n\r\n        this.containerStyle = {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            margin: '0 auto',\r\n            width: '90%'\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://yelpcamp.jdtalley.com/api/campgrounds\")\r\n        .then(res => res.json())\r\n        .then((result) => {\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    campgrounds: result.campgrounds\r\n                });\r\n            },\r\n            (error) => {\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    error\r\n                });\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        if(!this.state.isLoaded) {\r\n            return <div></div>;\r\n        } else {\r\n            return (\r\n                <div style={this.containerStyle}>\r\n                    <div>\r\n                        <h2>Our Most Popular Campgrounds!</h2>\r\n                    </div>\r\n                    <Campgrounds campgrounds={this.state.campgrounds} />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport NavbarContainer from '../containers/NavbarContainer';\r\nimport CampgroundsContainer from '../containers/CampgroundsContainer';\r\nimport {styles} from '../styles/neomorphism';\r\n\r\nconst divStyle = {\r\n    //backgroundColor:    styles.backgroundColor,\r\n    //color:              styles.color,\r\n    height:             '100vh',\r\n    margin:             '0',\r\n    display:            'flex',\r\n    flexDirection:      'column'\r\n}\r\n\r\nexport default class Homepage extends React.Component {\r\n    render() {\r\n        return (\r\n            <div style={divStyle}>\r\n                <NavbarContainer />\r\n                <CampgroundsContainer />\r\n            </div>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n//import App from './App';\r\nimport Homepage from './components/Homepage';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Homepage />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}